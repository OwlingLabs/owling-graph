// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Form extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Form entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Form must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Form", id.toString(), this);
    }
  }

  static load(id: string): Form | null {
    return changetype<Form | null>(store.get("Form", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get creation(): string {
    let value = this.get("creation");
    return value!.toString();
  }

  set creation(value: string) {
    this.set("creation", Value.fromString(value));
  }

  get questions(): string | null {
    let value = this.get("questions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set questions(value: string | null) {
    if (!value) {
      this.unset("questions");
    } else {
      this.set("questions", Value.fromString(<string>value));
    }
  }

  get possibly_answers(): string | null {
    let value = this.get("possibly_answers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set possibly_answers(value: string | null) {
    if (!value) {
      this.unset("possibly_answers");
    } else {
      this.set("possibly_answers", Value.fromString(<string>value));
    }
  }

  get results(): string | null {
    let value = this.get("results");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set results(value: string | null) {
    if (!value) {
      this.unset("results");
    } else {
      this.set("results", Value.fromString(<string>value));
    }
  }

  get fecha(): BigInt {
    let value = this.get("fecha");
    return value!.toBigInt();
  }

  set fecha(value: BigInt) {
    this.set("fecha", Value.fromBigInt(value));
  }

  get nft_quantity(): BigInt {
    let value = this.get("nft_quantity");
    return value!.toBigInt();
  }

  set nft_quantity(value: BigInt) {
    this.set("nft_quantity", Value.fromBigInt(value));
  }
}

export class Submit_form extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Submit_form entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Submit_form must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Submit_form", id.toString(), this);
    }
  }

  static load(id: string): Submit_form | null {
    return changetype<Submit_form | null>(store.get("Submit_form", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet_id(): string {
    let value = this.get("wallet_id");
    return value!.toString();
  }

  set wallet_id(value: string) {
    this.set("wallet_id", Value.fromString(value));
  }

  get form_id(): string {
    let value = this.get("form_id");
    return value!.toString();
  }

  set form_id(value: string) {
    this.set("form_id", Value.fromString(value));
  }

  get answers(): string | null {
    let value = this.get("answers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set answers(value: string | null) {
    if (!value) {
      this.unset("answers");
    } else {
      this.set("answers", Value.fromString(<string>value));
    }
  }

  get total_points(): string {
    let value = this.get("total_points");
    return value!.toString();
  }

  set total_points(value: string) {
    this.set("total_points", Value.fromString(value));
  }

  get final_result(): string {
    let value = this.get("final_result");
    return value!.toString();
  }

  set final_result(value: string) {
    this.set("final_result", Value.fromString(value));
  }

  get final_image(): string {
    let value = this.get("final_image");
    return value!.toString();
  }

  set final_image(value: string) {
    this.set("final_image", Value.fromString(value));
  }

  get fecha(): BigInt {
    let value = this.get("fecha");
    return value!.toBigInt();
  }

  set fecha(value: BigInt) {
    this.set("fecha", Value.fromBigInt(value));
  }
}

export class Nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Nft entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Nft must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Nft", id.toString(), this);
    }
  }

  static load(id: string): Nft | null {
    return changetype<Nft | null>(store.get("Nft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token_id(): string {
    let value = this.get("token_id");
    return value!.toString();
  }

  set token_id(value: string) {
    this.set("token_id", Value.fromString(value));
  }

  get owner_id(): string {
    let value = this.get("owner_id");
    return value!.toString();
  }

  set owner_id(value: string) {
    this.set("owner_id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get media(): string {
    let value = this.get("media");
    return value!.toString();
  }

  set media(value: string) {
    this.set("media", Value.fromString(value));
  }

  get form_id(): string {
    let value = this.get("form_id");
    return value!.toString();
  }

  set form_id(value: string) {
    this.set("form_id", Value.fromString(value));
  }

  get fecha(): BigInt {
    let value = this.get("fecha");
    return value!.toBigInt();
  }

  set fecha(value: BigInt) {
    this.set("fecha", Value.fromBigInt(value));
  }
}
